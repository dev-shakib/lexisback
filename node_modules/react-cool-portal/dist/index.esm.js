import { useRef, useState, useEffect, useCallback } from 'react';
import { createPortal as createPortal$1 } from 'react-dom';

var useLatest = (function (val) {
  var ref = useRef(val);
  ref.current = val;
  return ref;
});

var delay = (function (cb, delay) {
  if (delay === void 0) {
    delay = 100;
  }

  var timer = setTimeout(function () {
    clearTimeout(timer);
    cb();
  }, delay);
});

var shouldHide = (function (arg) {
  return Array.isArray(arg) ? arg.every(function (className) {
    return !Array.from(document.getElementsByClassName(className)).length;
  }) : arg;
});

var createEl = function createEl(id) {
  var el = document.createElement("div");
  el.setAttribute("id", id);
  document.body.appendChild(el);
  return el;
};

var createPortal = (function (id, autoRemoveContainer, isShow, clickOutsideCb, escCb) {
  return function (_ref) {
    var children = _ref.children;

    var _useState = useState(),
        container = _useState[0],
        setContainer = _useState[1];

    useEffect(function () {
      if (!isShow) return function () {
        return null;
      };
      setContainer(document.getElementById(id) || createEl(id));
      return function () {
        if (!container) return;
        delay(function () {
          if (autoRemoveContainer && container.innerHTML === "") container.remove();
        });
      };
    }, [container]);
    useEffect(function () {
      if (!isShow || !container) return function () {
        return null;
      };
      var isClickOutside = false;

      var handleMouseDown = function handleMouseDown(e) {
        isClickOutside = !container.contains(e.target);
      };

      var handleClick = function handleClick(e) {
        // @ts-expect-error
        if (isClickOutside) clickOutsideCb(e);
      };

      var handleKeyDown = function handleKeyDown(e) {
        // @ts-expect-error
        if (e.key === "Escape") escCb(e);
      };

      if (clickOutsideCb) {
        document.addEventListener("mousedown", handleMouseDown);
        document.addEventListener("click", handleClick);
      }

      if (escCb) document.addEventListener("keydown", handleKeyDown);
      return function () {
        if (clickOutsideCb) {
          document.removeEventListener("mousedown", handleMouseDown);
          document.removeEventListener("click", handleClick);
        }

        if (escCb) document.removeEventListener("keydown", handleKeyDown);
      };
    }, [container]);
    return isShow && container ? /*#__PURE__*/createPortal$1(children, container) : null;
  };
});

/* eslint-disable react-hooks/exhaustive-deps */
var defaultContainerId = "react-cool-portal";

var usePortal = function usePortal(_temp) {
  var _ref = _temp === void 0 ? {} : _temp,
      _ref$containerId = _ref.containerId,
      containerId = _ref$containerId === void 0 ? defaultContainerId : _ref$containerId,
      _ref$autoRemoveContai = _ref.autoRemoveContainer,
      autoRemoveContainer = _ref$autoRemoveContai === void 0 ? true : _ref$autoRemoveContai,
      _ref$defaultShow = _ref.defaultShow,
      defaultShow = _ref$defaultShow === void 0 ? true : _ref$defaultShow,
      _ref$clickOutsideToHi = _ref.clickOutsideToHide,
      clickOutsideToHide = _ref$clickOutsideToHi === void 0 ? true : _ref$clickOutsideToHi,
      _ref$escToHide = _ref.escToHide,
      escToHide = _ref$escToHide === void 0 ? true : _ref$escToHide,
      _ref$internalShowHide = _ref.internalShowHide,
      internalShowHide = _ref$internalShowHide === void 0 ? true : _ref$internalShowHide,
      onShow = _ref.onShow,
      onHide = _ref.onHide;

  var _useState = useState(defaultShow),
      isShow = _useState[0],
      setIsShow = _useState[1];

  var skipClickOutsideRef = useRef(false);
  var onShowRef = useLatest(onShow);
  var onHideRef = useLatest(onHide); // Workaround: because handleHide() will cache "isShow" state

  var isShowRef = useRef(defaultShow);
  var setSkipClickOutside = useCallback(function () {
    if (!clickOutsideToHide) return;
    skipClickOutsideRef.current = true;
    delay(function () {
      skipClickOutsideRef.current = false;
    });
  }, [clickOutsideToHide]);
  var show = useCallback(function (e) {
    setSkipClickOutside();
    if (isShowRef.current) return;
    setIsShow(true);
    isShowRef.current = true;
    if (onShowRef.current) onShowRef.current(e);
  }, [onShowRef, setSkipClickOutside]);
  var hide = useCallback(function (e) {
    setSkipClickOutside();
    if (!isShowRef.current) return;
    setIsShow(false);
    isShowRef.current = false;
    if (onHideRef.current) onHideRef.current(e);
  }, [onHideRef, setSkipClickOutside]);
  var toggle = useCallback(function (e) {
    if (isShowRef.current) {
      hide(e);
    } else {
      show(e);
    }
  }, [hide, show]);
  var handleHide = useCallback(function (e) {
    if (skipClickOutsideRef.current) return;
    if (e.type === "click" && shouldHide(clickOutsideToHide) || e.type === "keydown" && shouldHide(escToHide)) hide(e);
  }, [hide]);
  var Portal = useCallback(createPortal(containerId, autoRemoveContainer, !internalShowHide || isShow, handleHide, handleHide), [internalShowHide, isShow]);
  return {
    Portal: Portal,
    isShow: isShow,
    show: show,
    hide: hide,
    toggle: toggle
  };
};

export { usePortal as default, defaultContainerId };
